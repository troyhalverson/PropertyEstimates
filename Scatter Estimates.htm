<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Property Estimates by Sq Ft scatter chart</title>
		<link rel="icon" href="favicon2.ico" type="image/x-icon" />
		<!--
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
		-->
		<script src="chart.js"></script>
		<script src="chartjs-plugin-datalabels.js"></script>
		<script src="myChartLogic.js"></script>
		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f4f4f4;
				color: #333;
			}

			.chart-container {
				width: 80%;
				margin: auto;
				padding: 1em;
				border: none;
				margin-top: 0em;
			}
			.checkbox-container {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
			.checkbox-item {
				margin: 0.5em 1em;
			}
			.stats {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
		</style>
	</head>
	<body>
		<!-- Chart -->
		<div class="chart-container">
			<canvas id="mixedChart"></canvas>
		</div>

		<!-- Checkbox controls for filtering chart data -->
		<div class="checkbox-container">
			<div class="checkbox-item">
				<input type="checkbox" id="SET1" name="setFilter" value="RE" checked />
				<label for="SET1">RealEstimate</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="SET2" name="setFilter" value="ZE" unchecked />
				<label for="SET2">Zestimate</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="SET0" name="setFilter" value="OTHER" unchecked />
				<label for="SET0">Other</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="lines" name="setFilter" value="RL" checked />
				<label for="lines">Reference Lines</label>
			</div>
		</div>

		<!-- Summary statistics -->
		<div class="stats"><p id="statistics"></p></div>

		<script>
			YAXISLABEL = 'Estimated Property Values';
			XAXISLABEL = 'Assesssed Square Footage';

			// HTML elements
			const statisticsElement = document.getElementById('statistics');
			const chartElement = document.getElementById('mixedChart').getContext('2d');
			const ChartOptions = 'input[name="setFilter"]'; // CSS selector for checkboxes

			// Dataset ids used in HTML and properties{}
			// HTML checkbox values to toggle dataset visibility
			const RE = 'RE'; // RealEstimate dataset
			const ZE = 'ZE'; // Zestimate dataset

			// // used in commobChartLogic.js
			const SET1 = RE;
			const SET2 = ZE;
			const OTHER = 'OTHER'; // any other scatter sets
			const RL = 'RL'; // Reference Lines

			// Reference Line datasets for assessments{}
			const RL_AM = 'RL_AM';
			const RL_OLD = 'RL_OLD';
			const RL_NEW = 'RL_NEW';
			const RL_REAL = 'RL_REAL';

			const sets = {
				// strings and colors for chart datasets
				RE: { label: 'RealEstimate', color: 'rgba(54, 179, 39, 0.8)', note: 'Realtor.com' },
				ZE: { label: 'Zestimate', color: 'rgba(95, 96, 26, 0.8)', note: 'Zillow.com' },
				OTHER: { label: 'Other Estimates', color: 'rgba(245, 170, 40, 0.6)', note: '' },
				RL_AM: { label: 'AlphaMap Avg', color: 'purple', note: 'AlphaMap.com avg for 0.3 miles' },
				RL_OLD: { label: 'My old sqft', color: 'fuchsia', note: '1935 Assessment' },
				RL_NEW: { label: 'My new sqft', color: 'red', note: '2024 Assessment' },
				RL_REAL: { label: 'My Assessment', color: 'blue', note: 'most acurate assessment' },
				DEFAULT: { label: '(undefined)', color: 'rgba(150, 150, 150, 0.6)', note: '' },
			};

			// --- Data Definitions ---

			// Reference assessments
			// used  by AddAssessmentReferenceLines()to draw vertical reference lines.
			const assessments = [
				{ set: RL_OLD, sqft: 1116, note: '1935 original, entire footprint and porch' },
				{ set: RL_NEW, sqft: 1766, note: '2024 extention, added backroom and errors' },
				{ set: RL_REAL, sqft: 1944, note: 'most accurate assessment, includes upstairs ' },
			];

			// Estimated property value data
			// IMPORTANT: do not change the structure
			const estimates = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1, // estimated property values
				label: 2,
				set: 3,
				date: 4,
				note: 5,
				records: [
					[984, 370000, '1022 Curran', ZE, '04/18/2025', ''],
					[984, 377600, '1022 Curran', RE, '04/18/2025', ''],
					[1725, 504000, '10th St', ZE, '04/18/2025', 'Townhouse'],

					[1631, 870100, '1176 Atlantic', OTHER, '04/19/2025', 'Collateral Analytics 4-day spike'],
					[1631, 595180, '1176 Atlantic', RE, '04/20/2025', 'Quantarium'],
					[1631, 540100, '1176 Atlantic', ZE, '04/19/2025', ''],

					[2038, 859900, '1171B State', RE, '04/19/2025', ''],
					[2038, 799900, '1171B State', RE, '05/22/2025', ''],
					[2038, 848200, '1171B State', ZE, '04/19/2025', ''],
					[2038, 804300, '1171B State', ZE, '05/22/2025', ''],
					[1375, 515000, '461 Trabert', ZE, '04/18/2025', ''],
					[1375, 533516, '461 Trabert', RE, '04/18/2025', ''],

					[1116, 851000, '1176 State', OTHER, '04/15/2025', 'Collateral Analytics spike'],
					[1116, 327400, '1176 State', ZE, '03/27/2025', ''],
					[1116, 479900, '1176 State', RE, '04/18/2025', 'bouncing between diverse estimates'],
					[1766, 353900, '1176 State', ZE, '04/18/2025', ''],

					[1944, 680040, '1176 State', OTHER, '$350/sqft', ' at Zillow avg rate'],
					[1766, 618100, '1176 State', OTHER, '$350/sqft', ' at Zillow avg rate'],

					[1116, 423189, '1176 State', OTHER, '05/11/2025', 'Redfin'],
					[1116, 557700, '1176 State', RE, '05/17/2025', 'Hah!  up 16% in 29 days'],

					[1052, 495200, '1175 State', RE, '04/19/2025', ''],
					[1052, 330800, '1175 State', ZE, '04/19/2025', ''],

					[1016, 488400, '1180 State', RE, '04/19/2025', 'Sahir'],
					[1016, 384200, '1180 State', ZE, '04/19/2025', 'Sahir'],

					[1276, 484180, '1186 State', RE, '04/19/2025', 'Short-term rental'],
					[1276, 487400, '1186 State', ZE, '04/19/2025', 'Short-term rental'],

					[2263, 578621, '1185 State', RE, '04/19/2025', 'Kevin and Stacey Mobley'],
					[2263, 538694, '1185 State', RE, '05/11/2025', 'sqft is from Zillow'],
					[2263, 570257, '1185 State', OTHER, '05/11/2025', 'Redfin'],
					[2263, 459900, '1185 State', ZE, '04/19/2025', 'Kevin and Stacey Mobley'],

					[1500, 570000, '1189 State', RE, '04/19/2025', ''],
					[1500, 622800, '1189 State', ZE, '04/19/2025', ''],

					[1715, 492949, '1190 State', RE, '04/19/2025', 'Selig'],
					[1495, 506400, '1190 State', ZE, '04/19/2025', 'Selig'],

					[2038, 643600, '1199 State', RE, '04/19/2025', ''],
					/* [2038, 610000, '1199 State', RE, '04/21/2025', '' ],*/
					[2038, 613700, '1199 State', ZE, '04/19/2025', ''],

					[1715, 662200, '1190 Francis', RE, '04/19/2025', ''],
					[1715, 577400, '1190 Francis', ZE, '04/19/2025', ''],

					[1786, 889000, '1186B Francis', RE, '05/10/2025', ''],
					[1786, 871000, '1186B Francis', ZE, '05/10/2025', ''],

					[1608, 418000, '1170 Atlantic', RE, '04/20/2025', ''],

					[1888, 649900, '1190 Atlantic', ZE, '04/20/2025', ''],
					[1888, 649900, '1190 Atlantic', RE, '04/20/2025', '3bd2ba, 1car'],

					[1362, 549250, '1229 State', RE, '05/03/2025', ''],
					[1362, 555700, '1229 State', ZE, '05/03/2025', ''],

					[1657, 641941, '1251 State', RE, '05/03/2025', ''],
					[1657, 586400, '1251 State', ZE, '05/03/2025', ''],

					[1353, 577000, '1244 Atlantic', RE, '05/03/2025', ''],
					[1353, 600000, '1244 Atlantic', ZE, '05/03/2025', ''],

					[1030, 421200, '1179 Mecaslin', ZE, '04/19/2025', ''],
					[1030, 434578, '1179 Mecaslin', RE, '04/19/2025', ''],

					[1050, 427572, '1185 Mecaslin', RE, '04/20/2025', ''],
				],
			};

			// Property Data
			const properties = estimates; // use estimated property values

			// Reference line data for the chart
			let lines = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [
					['minsf', 628739, 'Avg of all within 0.3 mi', RL_AM, '2024 data'],
					['maxsf', 628739, '$629K', RL_AM, '2024 data'], // label intionally omitted
					// more records appended by AddAssessmentReferenceLines()
				],
			};

			// Averages for SET1, SET2, and OTHER datasets. Records will be created later
			let avgs = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [],
			};

			// --- Data Processing and Reference Line Generation ---

			// Get all checked checkboxes
			let selectedSets = Array.from(document.querySelectorAll(ChartOptions + ':checked')).map(
				(checkbox) => checkbox.value
			);

			// Calculate reference lines from properties and assessment data
			findAllSetAverages(properties, [SET1, SET2, OTHER], sets, avgs); // findAllSetAverages(selectedSets);

			AddAssessmentReferenceLines(assessments, avgs, properties, lines, sets); // AddAssessmentReferenceLines();

			let mixedChart; // Declare the chart.js context variable

			updateChart(false); // Pass false to prevent initial pushState on load

			// Event listener for checkbox changes
			document.querySelectorAll(ChartOptions).forEach((checkbox) => {
				checkbox.addEventListener('change', function () {
					updateChart(); // Update chart whenever a checkbox changes
				});
			});

			// Event listener for browser back/forward buttons
			window.onpopstate = function (event) {
				const selectedSetsOnPop = getInitialSelectedSetsFromUrl();
				document.querySelectorAll(ChartOptions).forEach((checkbox) => {
					checkbox.checked = selectedSetsOnPop.includes(checkbox.value);
				});
				updateChart(false); // Do not pushState again on popstate
			};
		</script>
	</body>
</html>
