<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Property Taxes by Sq Ft scatter chart</title>
		<link rel="icon" href="favicon2.ico" type="image/x-icon" />
		<!--
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
		-->
		<script src="chart.js"></script>
		<script src="chartjs-plugin-datalabels.js"></script>
        <script src="commonChartLogic.js"></script>
		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f4f4f4;
				color: #333;
			}

			.chart-container {
				width: 80%;
				margin: auto;
				padding: 1em;
				border: none;
				margin-top: 0em;
			}
			.checkbox-container {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
			.checkbox-item {
				margin: 0.5em 1em;
			}
			.stats {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
		</style>
	</head>
	<body>
		<!-- Chart -->
		<div class="chart-container">
			<canvas id="mixedChart"></canvas>
		</div>

		<!-- Checkbox controls for filtering chart data -->
		<div class="checkbox-container">
			<div class="checkbox-item">
				<input type="checkbox" id="SET1" name="setFilter" value="YR23" unchecked />
				<label for="SET1">2023 Taxes</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="SET2" name="setFilter" value="YR24" checked />
				<label for="SET2">2024 Taxes</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="SET0" name="setFilter" value="OTHER" unchecked />
				<label for="SET0">Other</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="lines" name="setFilter" value="RL" checked />
				<label for="lines">Reference Lines</label>
			</div>
		</div>

		<!-- Summary statistics -->
		<div class="stats"><p id="statistics"></p></div>

		<script>
			YAXISLABEL = 'Property Taxes Paid';
			XAXISLABEL = "Assesssed Square Footage";

			// HTML elements
			const statisticsElement = document.getElementById('statistics');
			const chartElement = document.getElementById('mixedChart').getContext('2d');
			const ChartOptions = 'input[name="setFilter"]'; // CSS selector for checkboxes

			// Dataset ids used in HTML and properties{}
			// HTML checkbox values to toggle dataset visibility
			const YR24 = 'YR24'; // 2024 dataset
			const YR23 = 'YR23'; //  2023 dataset
			const SET1 = 'YR23'; 
			const SET2 = 'YR24'; 
			const OTHER = 'OTHER'; // any other scatter sets
			const RL = 'RL'; // Reference Lines

			// Reference Line datasets
			const RL_AM = 'RL_AM';
			const RL_OLD = 'RL_OLD';
			const RL_NEW = 'RL_NEW';
			const RL_REAL = 'RL_REAL';

			const sets = {
				// strings and colors for chart datasets
				YR24: { label: '2024 Taxes', color: 'rgba(54, 179, 39, 0.8)', note: '' },
				YR23: { label: '2023 Taxes', color: 'rgba(95, 96, 26, 0.8)', note: '' },
				OTHER: { label: 'Other taxes', color: 'rgba(245, 170, 40, 0.6)', note: '' },
				RL_AM: { label: 'Average Atlanta', color: 'purple', note: 'North Atlanta' },
				RL_OLD: { label: 'My old sqft', color: 'fuchsia', note: '1935 Assessment' },
				RL_NEW: { label: 'My new sqft', color: 'red', note: '2024 Assessment' },
				RL_REAL: { label: 'My Assessment', color: 'blue', note: 'most acurate assessment' },
				DEFAULT: { label: '(undefined)', color: 'rgba(150, 150, 150, 0.6)', note: '' },
			};

			// --- Data Definitions ---

			// Reference assessments 
			// used  by AddAssessmentReferenceLines()to draw vertical reference lines.
			const assessments = [
				{ set: RL_OLD, sqft: 1116, note: '1935 original, entire footprint and porch' },
				{ set: RL_NEW, sqft: 1766, note: '2024 extention, added backroom and errors' },
				{ set: RL_REAL, sqft: 1944, note: 'most accurate assessment, includes upstairs ' },
			];

			// Real Estate Tax data
			// IMPORTANT: do not change the structure
			const taxes = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1, // real estate taxes
				label: 2,
				set: 3,
				note: 4,
				records: [
					[984, 2074, '1022 Curran', YR24, ''],
					[984, 2337, '1022 Curran', YR23, ''],

					[1888, 10122, '1190 Atlantic', YR24,''],
					[1888, 10124, '1190 Atlantic', YR23,''],

					[1631, 7446, '1176 Atlantic', YR24,''],
					[1631, 6283, '1176 Atlantic', YR23,''],

					[1353, 7230, '1244 Atlantic', YR24,''],
					[1353, 6138, '1244 Atlantic', YR23,''],

					[1375, 5564, '461 Trabert', YR24,''],
					[1375, 4917, '461 Trabert', YR23,''],

					[1052, 4608, '1175 State', YR24,''],
					[1052, 5423, '1175 State', YR23,''],

					[1116, 1169, '1176 State', YR23,''],
					[1766, 3114, '1176 State', YR24,''],
					[1116, 4252, '(1176 State)', OTHER, '2023 $3.8/sf * 1116 sf'], // hypothetical: old assessment at avg 2023 tax rate
					[1766, 7064, '(1176 State)', OTHER, '2024 $4.0/sf * 1766 sf'], // hypothetical: new assessment at avg 2024 tax rate
					[1944, 7776, '(1176 State)', OTHER, '2024 $4.0/sf * 1944 sf'], // hypothetical: real sqft assessment at avg 2024 tax rate

					[1016, 5264, '1180 State', YR24,''],
					[1016, 4914, '1180 State', YR23,''],

					[2263, 9381, '1185 State', YR24,''],
					[2263, 6108, '1185 State', YR23,''],

					[1276, 4066, '1186 State', YR24,''],
					[1276, 4095, '1186 State', YR23,''],

					[1500, 7249, '1189 State', YR24,''],
					[1500, 6306, '1189 State', YR23,''],

					[2038, 5279, '1199 State', YR24,''],
					[2038, 4794, '1199 State', YR23,''],

					[1280, 4619, '1190 State', YR24,''],
					[1280, 4620, '1190 State', YR23,''],

					[1362, 7051, '1229 State', YR24,''],
					[1362, 7484, '1229 State', YR23,''],

					[1657, 4526, '1251 State', YR24,''],
					[1657, 4147, '1251 State', YR23,''],

					[1030, 5631, '1179 Mecaslin', YR24,''],
					[1030, 5318, '1179 Mecaslin', YR23,''],

					[1050, 2828, '1185 Mecaslin', YR24,''],
					[1050, 2352, '1185 Mecaslin', YR23,''],

					[1776, 5694, '1170 Francis', YR24,''],
					[1776, 5221, '1170 Francis', YR23,''],

					[1715, 7506, '1190 Francis', YR24,''],
					[1715, 7952, '1190 Francis', YR23,''],

					[1786, 6409, '1186B Francis', YR24,''],
					[1786, 6810, '1186B Francis', YR23,''],

					[1264, 5328, '1203 Francis', YR24,''],
					[1264, 5688, '1203 Francis', YR23,''],

					[1096, 6425, '1209 Francis', YR24,''],
					[1096, 6350, '1209 Francis', YR23,''],
				],
			};

			// Property Data
			const properties = taxes; // use real estate tax values

			// Reference line data for the chart
			let lines = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [
					[ 'minsf', 6000, 'Avg of all within 0.3 mi', RL_AM, '2024 data'],
					[ 'maxsf', 6000, '$6K', RL_AM, '2024 data'], // label intionally omitted
					// more records appended by AddAssessmentReferenceLines()
				],
			};

			// Averages for SET1, SET2, and OTHER datasets. Records will be created later
			let avgs = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [],
			};

			// --- Data Processing and Reference Line Generation ---

			// Get all checked checkboxes
				let selectedSets = Array.from(document.querySelectorAll(ChartOptions + ':checked')).map(
				(checkbox) => checkbox.value
			);

			// Calculate reference lines from properties and assessment data
			findAllSetAverages(properties, [SET1, SET2, OTHER], sets, avgs); // findAllSetAverages(selectedSets);

			AddAssessmentReferenceLines(assessments, avgs, properties, lines, sets); // AddAssessmentReferenceLines();

			let mixedChart; // Declare the chart.js context variable

			updateChart(false); // Pass false to prevent initial pushState on load

			// Event listener for checkbox changes
			document.querySelectorAll(ChartOptions).forEach((checkbox) => {
				checkbox.addEventListener('change', function () {
					updateChart(); // Update chart whenever a checkbox changes
				});
			});

			// Event listener for browser back/forward buttons
			window.onpopstate = function (event) {
				const selectedSetsOnPop = getInitialSelectedSetsFromUrl();
				document.querySelectorAll(ChartOptions).forEach((checkbox) => {
					checkbox.checked = selectedSetsOnPop.includes(checkbox.value);
				});
				updateChart(false); // Do not pushState again on popstate
			};

		</script>
	</body>
</html>