<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Property Taxes by Sq Ft scatter chart</title>
		<link rel="icon" href="favicon2.ico" type="image/x-icon" />
		<!--
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
		-->
		<script src="chart.js"></script>
		<script src="chartjs-plugin-datalabels.js"></script>
		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f4f4f4;
				color: #333;
			}

			.chart-container {
				width: 80%;
				margin: auto;
				padding: 1em;
				border: none;
				margin-top: 0em;
			}
			.checkbox-container {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
			.checkbox-item {
				margin: 0.5em 1em;
			}
			.stats {
				display: flex;
				justify-content: center;
				align-items: center;
				margin-bottom: 1em;
			}
		</style>
	</head>
	<body>
		<!-- Chart -->
		<div class="chart-container">
			<canvas id="mixedChart"></canvas>
		</div>

		<!-- Checkbox controls for filtering chart data -->
		<div class="checkbox-container">
			<div class="checkbox-item">
				<input type="checkbox" id="YR23" name="setFilter" value="yr23" unchecked />
				<label for="setA">2023 Taxes</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="YR24" name="setFilter" value="yr24" checked />
				<label for="setB">2024 Taxes</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="OTHER" name="setFilter" value="OTHER" checked />
				<label for="OTHER">Other</label>
			</div>
			<div class="checkbox-item">
				<input type="checkbox" id="lines" name="setFilter" value="RL" checked />
				<label for="lines">Reference Lines</label>
			</div>
		</div>

		<!-- Summary statistics -->
		<div class="stats"><p id="statistics"></p></div>

		<script>
			console.log('Main script start');

			// HTML elements
			const statisticsElement = document.getElementById('statistics');
			const chartElement = document.getElementById('mixedChart').getContext('2d');
			const ChartOptions = 'input[name="setFilter"]'; // CSS selector for checkboxes

			// Dataset ids used in HTML and properties{}
			// HTML checkbox values to toggle dataset visibility
			const YR24 = 'YR24'; //  2024
			const YR23 = 'YR23'; //  2023
			const OTHER = 'OTHER'; // any other scatter sets
			const RL = 'RL'; // Reference Lines

			// Reference Line datasets
			const RL_AM = 'RL_AM';
			const RL_OLD = 'RL_OLD';
			const RL_NEW = 'RL_NEW';
			const RL_REAL = 'RL_REAL';
			const AVG = ' Average'; // label suffex for average reference lines

			// unique placeholder keys - the exact strings don't matter
			const MINSF = 'minsf';
			const MAXSF = 'maxsf';

			const sets = {
				// strings and colors for chart datasets
				YR24: { label: '2024 Taxes', color: 'rgba(54, 179, 39, 0.8)', note: '' },
				YR23: { label: '2023 Taxes', color: 'rgba(95, 96, 26, 0.8)', note: '' },
				OTHER: { label: 'Other taxes', color: 'rgba(245, 170, 40, 0.6)', note: '' },
				RL_AM: { label: 'Average Atlanta', color: 'purple', note: 'North Atlanta' },
				RL_OLD: { label: 'My old sqft', color: 'fuchsia', note: '1935 Assessment' },
				RL_NEW: { label: 'My new sqft', color: 'red', note: '2024 Assessment' },
				RL_REAL: { label: 'My Assessment', color: 'blue', note: 'most acurate assessment' },
				DEFAULT: { label: '(undefined)', color: 'rgba(150, 150, 150, 0.6)', note: '' },
				AM: {},
			};

			// --- Data Definitions ---

			// Reference property assessment sizes (sqft), dataset key, and description
			// These are used to draw vertical reference lines at their assessed sqft values.
			const assessments = [
				{ set: RL_OLD, sqft: 1116, note: '1935 original, entire footprint and porch' },
				{ set: RL_NEW, sqft: 1766, note: '2024 extention, added backroom and errors' },
				{ set: RL_REAL, sqft: 1944, note: 'most accurate assessment, includes upstairs ' },
			];

			// Property data
			// IMPORTANT: do not change properties{} structure
			const properties = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				date: 4,

				records: [
					[984, 2074, '1022 Curran', 'yr24', ''],
					[984, 2337, '1022 Curran', YR23, ''],

					[1888, 10122, '1190 Atlantic', YR24,''],
					[1888, 10124, '1190 Atlantic', YR23,''],

					[1631, 7446, '1176 Atlantic', YR24,''],
					[1631, 6283, '1176 Atlantic', YR23,''],

					[1353, 7230, '1244 Atlantic', YR24,''],
					[1353, 6138, '1244 Atlantic', YR23,''],

					[1375, 5564, '461 Trabert', YR24,''],
					[1375, 4917, '461 Trabert', YR23,''],

					[1052, 4608, '1175 State', YR24,''],
					[1052, 5423, '1175 State', YR23,''],

					[1116, 1169, '1176 State', YR23,''],
					[1766, 3114, '1176 State', YR24,''],
					[1116, 4252, '(1176 State)', OTHER, '2023 $3.8/sf * 1116 sf'], // hypothetical: old assessment at avg 2023 tax rate
					[1766, 7064, '(1176 State)', OTHER, '2024 $4.0/sf * 1766 sf'], // hypothetical: new assessment at avg 2024 tax rate
					[1944, 7776, '(1176 State)', OTHER, '2024 $4.0/sf * 1944 sf'], // hypothetical: real sqft assessment at avg 2024 tax rate

					[1016, 5264, '1180 State', YR24,''],
					[1016, 4914, '1180 State', YR23,''],

					[2263, 9381, '1185 State', YR24,''],
					[2263, 6108, '1185 State', YR23,''],

					[1276, 4066, '1186 State', YR24,''],
					[1276, 4095, '1186 State', YR23,''],

					[1500, 7249, '1189 State', YR24,''],
					[1500, 6306, '1189 State', YR23,''],

					[2038, 5279, '1199 State', YR24,''],
					[2038, 4794, '1199 State', YR23,''],

					[1280, 4619, '1190 State', YR24,''],
					[1280, 4620, '1190 State', YR23,''],

					[1362, 7051, '1229 State', YR24,''],
					[1362, 7484, '1229 State', YR23,''],

					[1657, 4526, '1251 State', YR24,''],
					[1657, 4147, '1251 State', YR23,''],

					[1030, 5631, '1179 Mecaslin', YR24,''],
					[1030, 5318, '1179 Mecaslin', YR23,''],

					[1050, 2828, '1185 Mecaslin', YR24,''],
					[1050, 2352, '1185 Mecaslin', YR23,''],

					[1776, 5694, '1170 Francis', YR24,''],
					[1776, 5221, '1170 Francis', YR23,''],

					[1715, 7506, '1190 Francis', YR24,''],
					[1715, 7952, '1190 Francis', YR23,''],

					[1786, 6409, '1186B Francis', YR24,''],
					[1786, 6810, '1186B Francis', YR23,''],

					[1264, 5328, '1203 Francis', YR24,''],
					[1264, 5688, '1203 Francis', YR23,''],

					[1096, 6425, '1209 Francis', YR24,''],
					[1096, 6350, '1209 Francis', YR23,''],
				],
			};

			// Reference line data for the chart
			// IMPORTANT: structure mirrors properties{}
			let lines = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [
					// MINSF and MAXSF will get updated to reflect actual property data
					[MINSF, 6000, 'Avg of all within 0.3 mi', RL_AM, '2024 data'],
					[MAXSF, 6000, '$6K', RL_AM, '2024 data'], // label intionally omitted
					// more records appended by AddAssessmentReferenceLines()
				],
			};

			// Averages for YR23, YR24, and OTHER datasets. Records will be created later
			// IMPORTANT: structure mirrors properties{}
			let avgs = {
				// field positions in records[[array]]
				sqft: 0,
				value: 1,
				label: 2,
				set: 3,
				note: 4,
				records: [],
			};

			// --- Helper Functions ---

			// Retrieve the set-specific display label if available.
			function labelMap(set) {
				return sets[set]?.label || sets.DEFAULT.label;
			}

			// Retrieve the set-specific rgba color if available.
			function colorMap(set) {
				return sets[set]?.color || sets.DEFAULT.color;
			}

			// Boolean Test. OTHER sets are neither YR23 not YR24.
			// facilitates filtering in createScatterDataset()
			function isOtherSet(set) {
				return set !== YR23 && set !== YR24;
			}

			// Convert an RGBA color string to have full opacity (alpha = 1) for borders.
			function getOpaqueBorderColor(rgbaColor) {
				if (typeof rgbaColor === 'string' && rgbaColor.startsWith('rgba(')) {
					return rgbaColor.replace(/, [\d\.]+([,\)])/, ', 1$1'); // Sets alpha to 1
				} else return rgbaColor; // unchanged
			}

			// Replace MINSF and MAXSF placeholders with given sqft values
			function updateLineSqft(min, max) {
				const sf = lines.sqft; // array index
				lines.records.forEach((r) => {
					if (MINSF === r[sf]) r[sf] = min;
					if (MAXSF === r[sf]) r[sf] = max;
				});
			}

			/**
			 * Parse  URL query string to get any initially selected sets.
			 * @returns {Array<string>} An array of selected set values.
			 */
			function getInitialSelectedSetsFromUrl() {
				const params = new URLSearchParams(window.location.search);
				const setsParam = params.get('sets');
				if (setsParam) {
					return setsParam.split(',');
				}
				// Default selected sets if no 'sets' parameter in URL
				return Array.from(document.querySelectorAll(ChartOptions + ':checked')).map(
					(checkbox) => checkbox.value
				);
			}

			//console.log('Reference line data: ', lines.records);

			// --- Data Processing and Reference Line Generation ---

			// Get all checked checkboxes
				let selectedSets = Array.from(document.querySelectorAll(ChartOptions + ':checked')).map(
				(checkbox) => checkbox.value
			);

			// Calculate reference lines from properties and assessment data
			findAllSetAverages(selectedSets);

			AddAssessmentReferenceLines();

			let mixedChart; // Declare the chart.js context variable

			updateChart(false); // Pass false to prevent initial pushState on load

			// Event listener for checkbox changes
			document.querySelectorAll(ChartOptions).forEach((checkbox) => {
				checkbox.addEventListener('change', function () {
					updateChart(); // Update chart whenever a checkbox changes
				});
			});

			// Event listener for browser back/forward buttons
			window.onpopstate = function (event) {
				const selectedSetsOnPop = getInitialSelectedSetsFromUrl();
				document.querySelectorAll(ChartOptions).forEach((checkbox) => {
					checkbox.checked = selectedSetsOnPop.includes(checkbox.value);
				});
				updateChart(false); // Do not pushState again on popstate
			};

			function AddAssessmentReferenceLines() {
				/* these point pairs define a line of house values for each Taxes Per Square Foot (TPSF) */

				// Find horizontal bounds for reference lines to fit within the extents of the properties{} data
				const minSqFt =
					1.0 * Math.min(...properties.records.map((record) => record[properties.sqft])).toPrecision(2);
				const maxSqFt =
					1.0 * Math.max(...properties.records.map((record) => record[properties.sqft])).toPrecision(2);

				// Replace sqft placeholders with actual values from properties{} data
				for (let i = 0; i < lines.records.length; i++) {
					if (lines.records[i][0] === MINSF) lines.records[i][0] = minSqFt;
					if (lines.records[i][0] === MAXSF) lines.records[i][0] = maxSqFt;
				}

				// Set a range for reasonable variances from an average or median tax per square foot (TPSF)
				const plausibleDiscount = 0.7; // 30% discount
				const plausiblePremium = 1.3; // 30% premium

				// Find vertical bounds for reference lines around average tax per square foot (TPSF)
				avgTPSF = avgs.records[0][avgs.value] / avgs.records[0][avgs.sqft];
				minValue = (plausibleDiscount * avgTPSF).toFixed(0); // least value below the average TPSF
				maxValue = (plausiblePremium * avgTPSF).toFixed(0); //  most value above average TPSF

				// Calculate average price per square foot (PPSF) from the avgs.records
				avgPPSF = avgs.records[0][avgs.value] / avgs.records[0][avgs.sqft];
				minRate = (0.7 * avgPPSF).toFixed(0); // 30% below average
				maxRate = (1.2 * avgPPSF).toFixed(0); // 20% above average


				// create datapoints to define vertical reference lines at each assessment size
				assessments.forEach((a) => {
					//const note = a.note;
					const sf = a.sqft;
					const label = sets[a.set].label + ' at $';
					const minLabel = label + minRate + '/sf';
					const maxLabel = label + maxRate + '/sf';
					lines.records.push([sf, sf * minRate, sf + ' sf', a.set, minLabel]); // only label one end of line
					lines.records.push([sf, sf * maxRate, '', a.set, maxLabel]);
				});
				console.log(lines.records);

				const allSfs = properties.records.map((record) => record[properties.sqft]);
				const minSf = parseFloat(Math.min(...allSfs).toPrecision(2));
				const maxSf = parseFloat(Math.max(...allSfs).toPrecision(2));
				//console.log( minSqft, maxSqft);
				updateLineSqft(minSf, maxSf);

				// Create TPSF reference line for each set average property tax
				avgs.records.forEach((record, index) => {
					const label = record[avgs.label];
					if ('' === label) {
						label = 'record ' & index;
					}

					const sqft = record[avgs.sqft];
					if (typeof sqft != 'number') {
						console.warn(`Invalid data, ${label} sqft ${sqft} is not a number`);
						return;
					}
					if (sqft <= 0) {
						console.warn(`Invalid data, ${label} sqft ${sqft} must be greater than zero`);
						return;
					}
					const value = record[avgs.value];
					if (typeof value != 'number') {
						console.warn(`Invalid data, ${label} value ${value} is not a number`);
						return;
					}

					const TPSF = (value / sqft).toPrecision(3); // Taxes Per Square Foot
					// console.log(`${label}: $${TPSF} per sqft`);
					lines.records.push([minSf, minSf * TPSF, '', label, TPSF]);
					lines.records.push([maxSf, maxSf * TPSF, label + AVG + ': $' + TPSF + '/sf', label, TPSF]);
				});
				console.log('Reference lines: ', ...lines.records);
			} // AddAssessmentReferenceLines

			// Find the average property values for the currently selected sets
			function findAllSetAverages() {
				const scattersets = [ YR23, YR24, OTHER ];
				scattersets.forEach((set) => {
					let setRecords;
					if ( set === OTHER ) {
						// For 'Other', filter properties where set is neither 2023 nor 2024
						setRecords = properties.records.filter(
							(record) => record[properties.set] !== YR23 && record[properties.set] !== YR24
						);
					} else {
						setRecords = properties.records.filter((record) => record[properties.set] === set);
					}

					if (setRecords.length > 0) {
						avgSqft = setRecords.reduce((sum, record) => sum + record[properties.sqft], 0);
						avgSqft = Math.round(avgSqft / setRecords.length);
						avgValue = setRecords.reduce((sum, record) => sum + record[properties.value], 0);
						avgValue = Math.round(avgValue / setRecords.length);
						avgs.records.push([avgSqft, avgValue, set, sets[set].label + AVG, '']);
					}
				});
				console.log('Set averages:', ...avgs.records);
			} // end findAllSetAverages()

			// Find the average property values for the currently selected sets
			function findAverages(selectedSets) {
				let metrics = { sqft: 0, value: 0, cnt: 0 };
				if (!properties || !properties.records || properties.records.length === 0) {
					return metrics;
				}

				for (const record of properties.records) {
					// Add defensive check for undefined or null records
					if (!record) {
						console.warn('Skipping undefined or null record in properties.records');
						continue; // Skip to the next iteration
					}

					// Check if the current record's set is directly selected
					if (selectedSets.includes(record[properties.set])) {
						metrics.sqft += record[properties.sqft];
						metrics.value += record[properties.value];
						metrics.cnt++;
					} else if (
						selectedSets.includes( OTHER ) &&
						record[properties.set] !== YR23 &&
						record[properties.set] !== YR24
					) {
						// If 'Other' is selected, include records that are not YR23, nor YR24
						metrics.sqft += record[properties.sqft];
						metrics.value += record[properties.value];
						metrics.cnt++;
					}
				}
				// Avoid division by zero
				const averageSqft = metrics.cnt > 0 ? metrics.sqft / metrics.cnt : 0;
				const averageValue = metrics.cnt > 0 ? metrics.value / metrics.cnt : 0;
				metrics.sqft = parseFloat(averageSqft.toPrecision(3));
				metrics.value = parseFloat(averageValue.toPrecision(3));
				return metrics;
			} // end findAverages

			// config helper for updateChart()
			function createScatterDataset(setType) {
				let filteredData = [];
				if (setType === OTHER) {
					filteredData = properties.records.filter((record) => isOtherSet(record[properties.set]));
				} else {
					filteredData = properties.records.filter((record) => record[properties.set] === setType);
				}
				console.log('Add', filteredData.length, setType );

				if (filteredData.length === 0) {
					console.warn('no data filtered for scatter', setType);
					return null;
				}
				return {
					type: 'scatter',
					label: sets[setType].label,
					data: filteredData.map((record) => ({
						x: record[properties.sqft],
						y: record[properties.value],
						label: record[properties.label],
						date: record[properties.date],
						notes: record[properties.note],
					})),
					backgroundColor: sets[setType].color,
					borderColor: getOpaqueBorderColor(sets[setType].color),
					pointRadius: 5,
					pointHoverRadius: 8,
					showLine: false, // no lines between scatter points
				};
			} // end createScatterDataset()

			// config helper for updateChart()
			function createLineDataset(set) {
				const filteredLineData = lines.records.filter((record) => record[properties.set] === set);
				if (filteredLineData.length === 0) {
					console.warn('no data filtered for line', set);
					return null;
				}

				const recDataset = filteredLineData.map((record) => ({
					x: record[properties.sqft],
					y: record[properties.value],
					label: record[properties.label],
					date: record[properties.date], // bug: the correct value for $/sqft should be in the note, not the date
					note: record[properties.note], // note may contain $/sqft
				}));

				// log specifcally for 2023 and 2024 sets
				if ( YR23 == set || YR24 == set) {
					const ppsf = 1.0 * (recDataset[0].y / recDataset[0].x).toPrecision(3);
					console.log('Add line:', sets[set].label, 'avg', ppsf, '$/sqft');
				} else {
					if (RL_AM == set) {
						console.log('Add line:', sets[set].label, '$', recDataset[0].y);
					} else {
						console.log('Add line:', sets[set].label, recDataset[0].x);
					}
				}
				return {
					type: 'line',
					label: labelMap(set),
					data: recDataset,
					fill: false,
					borderColor: sets[set].color || sets.DEFAULT.color,
					backgroundColor: 'rgba(255, 255, 255, 0.1)',
					tension: 0,
					pointRadius: 1,
					borderWidth: 1,
					pointHoverRadius: 3,
					showLine: true,
				};
			} // end createLineDataset()

			function updateChart(pushState = true) {
				const datasets = [];

				// Get all checked checkboxes
				const selectedSets = Array.from(document.querySelectorAll(ChartOptions + ':checked')).map(
					(checkbox) => checkbox.value
				);
				console.log('Checked: ', ...selectedSets);

				// Update URL with selected sets if pushState is true
				if (pushState) {
					const newUrl = new URL(window.location.href);
					if (selectedSets.length > 0) {
						newUrl.searchParams.set('sets', selectedSets.join(','));
					} else {
						newUrl.searchParams.delete('sets');
					}
					history.pushState({ sets: selectedSets }, '', newUrl.toString());
				}

				// Handle the main scatter points
				const scatterPointTypes = [ YR23, YR24, OTHER ]; // could add Redfin, etc.
				scatterPointTypes.forEach((set) => {
					if (selectedSets.includes(set)) {
						const scatterData = createScatterDataset(set);
						if (scatterData) {
							//console.log( 'scatterData', scatterData ); // TESTING
							datasets.push(scatterData);
						}

						// Display the set's reference line if RL checkbox is selected
						// IMPORTANT: reference line is added here so the RL legend appears next to its corresponding scatter set legend
						// DO NOT MOVE or combine with the other RL handler further below
						if (selectedSets.includes(RL)) {
							const lineDataset = createLineDataset(set);
							if (lineDataset) datasets.push(lineDataset);
							//console.log('Add line:', set + AVG, parseFloat(lineDataset.data[0].date), '$/sqft');
						}
					}
				});

				// Handle the other reference lines if RL checkbox is selected
				if (selectedSets.includes(RL)) {
					const lineReferenceTypes = [RL_AM, RL_NEW, RL_OLD, RL_REAL];
					lineReferenceTypes.forEach((set) => {
						const lineData = createLineDataset(set);
						if (lineData) datasets.push(lineData);
					});
				}

				const config = {
					type: 'scatter',
					data: { datasets: datasets },
					options: {
						responsive: true,
						maintainAspectRatio: true,

						scales: {
							x: {
								type: 'linear',
								position: 'bottom',
								title: {
									display: true,
									text: 'Assessed Square Feet',
									fontColor: '#555',
									fontSize: 16,
									padding: 8,
								},
								ticks: {
									beginAtZero: true,
									font: {
										color: '#666',
									},
								},
							},
							y: {
								type: 'linear',
								position: 'left',
								title: {
									display: true,
									text: 'Taxes Paid',
									fontColor: '#555',
									font: {
										size: 16,
										color: '#555',
									},
									padding: 8,
								},
								ticks: {
									beginAtZero: true,
									font: {
										color: '#666',
									},
									callback: function (value) {
										if (value >= 10000) { // taxes are generally under $10,000
											return (value / 1000).toPrecision(2) + 'K';
										}
										return value.toLocaleString();
									},
								},
							},
						},
						plugins: {
							title: {
								display: true,
								text: 'Recent Property Taxes by Assessed Square Footage',
								font: {
									size: 18,
									color: '#333',
								},
								padding: 10,
							},
							tooltip: {
								callbacks: {
									label: function (context) {
										let label = context.dataset.label || '';
										if (label) {
											label += ': ';
										}
										let price = context.parsed.y; // Use parsed.y for the numerical value
										label += `$${price.toLocaleString()} for ${context.parsed.x} sq ft`; //

										// Add the specific point label if available (useful for reference lines)
										if (context.raw && context.raw.label) {
											label += ` - ${context.raw.label}`;
										}
										return label;
									},
									title: function (context) {
										// For scatter points, show the property label
										if (
											context[0].dataset.type === 'scatter' &&
											context[0].raw &&
											context[0].raw.label
										) {	
											let title = ''; // `${context[0].raw.label}`;
											if (context[0].raw.date !== '') {
												title += ` ${context[0].raw.label}`;
											}
											// Add the sqft if available
											if (context[0].raw && context[0].raw.x) {
												title += `, ${context[0].raw.x} sqft`;
											}

											// Add the note if available and not empty
											if (context[0].raw && context[0].raw.notes) {
												title += `, ${context[0].raw.notes}`;
											}

											return title;
										}
										// For line points, show the line label
										if (context[0].dataset.type === 'line') {
											return `${context[0].dataset.label}`;
										}
										return ''; // Default empty title
									},
								},
								backgroundColor: 'rgba(0, 0, 0, 0.8)',
								titleFontColor: '#fff',
								bodyFontColor: '#eee',
								borderColor: '#333',
								borderWidth: 1,
								cornerRadius: 4,
								padding: 8,
							},
							legend: {
								display: true,
								position: 'top',
							},
							datalabels: {
								display: true,
							},
						},
					},
					plugins: [ChartDataLabels], // ChartDataLabels requires src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"
				};

				if (mixedChart) {
					mixedChart.destroy();
				}
				mixedChart = new Chart(chartElement, config);

				const fa = findAverages(selectedSets);
				console.log('Metrics for selections: ', fa);

				const tpsf = (fa.value / fa.sqft).toPrecision(3);
				statisticsElement.innerHTML = 'Average of ' + fa.cnt + ' taxes: ';
				statisticsElement.innerHTML += '$' + tpsf + '/sq ft, ';
				statisticsElement.innerHTML += '$' + fa.value.toFixed(0) + ' ';
				statisticsElement.innerHTML += fa.sqft + ' sq ft';
			} // end updateChart()
		</script>
	</body>
</html>
